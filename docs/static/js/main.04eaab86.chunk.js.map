{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAgBaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAuB5C,OACI,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAKCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAvBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCrBlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,EAAnBJ,GAAoB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAInC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAa,MAGZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IALyB,mBAG/BC,EAH+B,KAGxBC,EAHwB,KA2CtC,OAlCAC,qBAAW,WAGPxB,EAASC,GACJwB,MAAK,SAAAC,GAYHH,EAAS,CACJf,KAAKkB,EACLL,SAAS,SAItB,CAACpB,IAYGqB,EDzCuBK,CAAa1B,GAA/Ba,EAFuB,EAE5BN,KAAYa,EAFgB,EAEhBA,QAEnB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAACC,GAAD,OAER,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEbxBgB,EAAe,WAAM,MAaMzC,mBAAS,CAAC,cAbhB,mBAavB0C,EAbuB,KAaX3C,EAbW,KAgB9B,OACI,qCACI,8CAGA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAUO2C,EAAWnB,KAAK,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADHA,Y,MCtCnC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.04eaab86.chunk.js","sourcesContent":["//71. Componente AddCategory\r\n//manejaremos y visualizaremos cuando la persona escribe algo en un input y presionar ENTER y disparar algo\r\n\r\n// 72. Comunicación entre componente:\r\n// vamos hacer una comunicación entre en linput del formulario con la <li>lista</li>\r\n// ¿Cómo lo hacemos? - llamar desde aqui al setCategories del archivo GifExpertApp.js\r\n// y en GifExpertApp.js, pasarle a este componente el setCategories como propiedades\r\n\r\n// rafc + TAB\r\nimport React, {useState} from 'react';\r\n\r\n//importemos el propType, para que setCategories, sea una función requerida:\r\nimport PropTypes from 'prop-types';\r\n\r\n// 72. añadimos props , para recivir las propiedades props\r\n// o usualmente se destructuran los argumentos del componente:\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    //necesitamos para el input text, un estado:\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log('Submit hecho');\r\n        //setCategories:\r\n        // 72.Comunicación entre componente:\r\n        //validemos, para que no puedan enviar un string vacío,mínomo 2 car y lo inicializamos a  '':\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cats => [inputValue, ...cats ] );\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n//una vez importado el propType, para que setCategories, sea una función requerida:\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","// 77. Helpers - getGifs\r\n\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=pw8SraOg39SWH5jYaFUiEcYsGWtT8Ixz`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","// 75. Mostras los títulos de las imágenes\r\nimport React from 'react';\r\n\r\nexport const GifGridItem = ({id, title,url}) => {\r\n\r\n    //console.log({id, title,url});\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={title}></img>\r\n           <p>{title}</p>\r\n        </div>\r\n    );\r\n}\r\n","//78. Custom Hook - creamos una carpeta en src - hooks - y un archivo useFetechGifs.js\r\n//todos los hooks empieza con 'use' en el nombre\r\n// son funciones\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images,loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( (img) => (\r\n                           \r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// 78. Custom Hooks:\r\n//carga automática, petición automática, cuando por primeraa vez o cuando es necesario la recarga.\r\n//79. useFetchGifs - obtener  imágenes y bandera de carga\r\n\r\nimport { useState,useEffect } from \"react\"\r\n//79:\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n   \r\n    //pueden tener un estado:\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //79. : podemos poner efectos a mi custom Hook\r\n    useEffect( () =>{\r\n        \r\n        //aquí hacemos la petición http y traer las imágenes:\r\n        getGifs( category )\r\n            .then(imgs => {\r\n\r\n                /*\r\n                setTimeout(()=>{\r\n                    //console.log(imgs)\r\n                    setState({\r\n                        data:imgs,\r\n                        loading: false\r\n                    });\r\n                },3000);\r\n                */\r\n               //80. Anumacions por CSS en nuestra aplicación:\r\n               setState({\r\n                    data:imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category]);\r\n\r\n    //78:\r\n    /*\r\n    setTimeout(() => {\r\n        setState({\r\n            data: [1,2,3,4,5,6,7],\r\n            loading: false\r\n        })\r\n    }, 3000);\r\n    */\r\n\r\n    return state; // {data:[], loading:true};\r\n\r\n}\r\n","// 69. GifExpertApp - Component\r\n//rafc + TAB\r\nimport React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    // 70. Creando una lista de categorias\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragron Ball'];\r\n    //const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragron Ball'])\r\n    // Tarea: agregar al array con setCategories\r\n    /*\r\n    const handleAdd = () => {\r\n        //setCategories( ['HunterXHunter',...categories ] );\r\n        setCategories( cats => [...cats, 'HunterXHunter'] );\r\n    }*/\r\n    // fin 70.\r\n\r\n    // 73. Fetch Api - obtener las imágenes deseadas\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            {/** 71. Componente AddCategory */}\r\n             {/** 72. Componente AddCategory comunicarse entre componentes */}\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n            {/*<button onClick ={handleAdd}>Agregar</button>*/}\r\n            {/*Incluir las cetegorías en html:*/}\r\n            <ol>\r\n                {\r\n                    /*\r\n                    // el map recibe dos argumentos por defecto: elemento del array y el indice\r\n                    categories.map( category => {\r\n                        // dará error de duplicado de Key de esta forma, pero esto ser´´a cogido desde la BBDD\r\n                        return <li key={category}> {category} </li>\r\n                    })\r\n                    */\r\n                   // 73. Fetch API - obtener las imágenes deseadas:\r\n                   categories.map( category => (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n// 69.GifExpertApp - Component\n\n// Tarea: crea componenete GifExpertApp\n//<h2>GifExprtApp</h2>\n//<hr />\n// 1º crear componente en src: GifExpertApp.js"],"sourceRoot":""}